version: '3'
services:
    # Zookeeperクラスタ
    zookeeper1:
        build: ./zookeeper
        image: "myzookeeper"
        container_name: "zookeeper1"
        ports:
            - "2001:2181"
        environment:
            ZOOKEEPER_MYID: 1
        volumes:
            # 設定ファイル
            - ./zookeeper/zoo.cfg:/home/zookeeper/apache-zookeeper-3.6.2-bin/conf/zoo.cfg
            # 永続化
            - zookeeper1:/var/lib/zookeeper

              #    zookeeper2:
              #        build: ./zookeeper
              #        image: "myzookeeper"
              #        container_name: "zookeeper2"
              #        ports:
              #            - "2002:2181"
              #        environment:
              #            ZOOKEEPER_MYID: 2
              #        volumes:
              #            - ./zookeeper/zoo.cfg:/home/zookeeper/apache-zookeeper-3.6.2-bin/conf/zoo.cfg
              #            # 永続化
              #            - zookeeper2:/var/lib/zookeeper
              #
              #    zookeeper3:
              #        build: ./zookeeper
              #        image: "myzookeeper"
              #        container_name: "zookeeper3"
              #        ports:
              #            - "2003:2181"
              #        environment:
              #            ZOOKEEPER_MYID: 3
              #        volumes:
              #            - ./zookeeper/zoo.cfg:/home/zookeeper/apache-zookeeper-3.6.2-bin/conf/zoo.cfg
              #            # 永続化
              #            - zookeeper3:/var/lib/zookeeper

    # Kafka Brokerクラスタ
    broker1:
        build: ./kafkabroker
        depends_on:
            - zookeeper1
            #- zookeeper2
            #- zookeeper3
        image: "mykafka"
        container_name: "broker1"
        ports:
            - "9001:9092"
        volumes:
            # 設定ファイル
            - ./kafkabroker/server1.properties:/home/kafka/kafka_2.13-2.6.0/config/server.properties
            # 永続化
            - broker1:/tmp/kafka-logs
        hostname: "broker1"

        # メモリが足らなくなってきたのでクラスタリングは一時停止
        #    broker2:
        #        build: ./kafkabroker
        #        depends_on:
        #            - zookeeper1
        #            - zookeeper2
        #            - zookeeper3
        #        image: "mykafka"
        #        container_name: "broker2"
        #        ports:
        #            - "9002:9092"
        #        volumes:
        #            - ./kafkabroker/server2.properties:/home/kafka/kafka_2.13-2.6.0/config/server.properties
        #            # 永続化
        #            - broker2:/tmp/kafka-logs
        #        hostname: "broker2"
        #
        #    broker3:
        #        build: ./kafkabroker
        #        depends_on:
        #            - zookeeper1
        #            - zookeeper2
        #            - zookeeper3
        #        image: "mykafka"
        #        container_name: "broker3"
        #        ports:
        #            - "9003:9092"
        #        volumes:
        #            - ./kafkabroker/server3.properties:/home/kafka/kafka_2.13-2.6.0/config/server.properties
        #            # 永続化
        #            - broker3:/tmp/kafka-logs
        #        hostname: "broker3"

    # Kafka RESET Proxyサーバ
    kafka_proxy:
        build: ./confluent
        depends_on:
            - broker1
            #- broker2
            #- broker3
        image: "myconfluent"
        container_name: "kafka_proxy"
        ports:
            - "8082:8082"
        volumes:
            - ./confluent/kafka-rest.properties:/home/confluent/confluent-6.0.0/etc/kafka-rest/kafka-rest.properties
        command: ["kafka-rest-start","/home/confluent/confluent-6.0.0/etc/kafka-rest/kafka-rest.properties"]

    # Kafka Connectサーバ
    kafka_connector1:
        build: ./kafkaconnector
        depends_on:
            - broker1
            #- broker2
            #- broker3
        image: "mykafkaconnector"
        container_name: "kafka_connector1"
        ports:
            - "8083:8083"
        volumes:
            - ./kafkaconnector/connect-distributed.properties:/home/kafka/kafka_2.13-2.6.0/config/connect-distributed.properties
            - ./kafkaconnector/connector_plugins/lib:/home/kafka/connector_plugins/lib
            - ./kafkaconnector/connector_plugins/etc:/home/kafka/connector_plugins/etc
        command: ["connect-distributed.sh","/home/kafka/kafka_2.13-2.6.0/config/connect-distributed.properties","/home/kafka/connector_plugins/etc/quickstart-elasticsearch.properties"]

        # メモリが足らなくなってきたのでクラスタリングは一時停止
        #    kafka_connector2:
        #        build: ./kafkaconnector
        #        depends_on:
        #            - broker1
        #            - broker2
        #            - broker3
        #        image: "mykafkaconnector"
        #        container_name: "kafka_connector2"
        #        ports:
        #            - "8084:8083"
        #        volumes:
        #            - ./kafkaconnector/connect-distributed.properties:/home/kafka/kafka_2.13-2.6.0/config/connect-distributed.properties
        #            - ./kafkaconnector/connector_plugins/lib:/home/kafka/connector_plugins/lib
        #            - ./kafkaconnector/connector_plugins/etc:/home/kafka/connector_plugins/etc
        #        command: ["connect-distributed.sh","/home/kafka/kafka_2.13-2.6.0/config/connect-distributed.properties","/home/kafka/connector_plugins/etc/quickstart-elasticsearch.properties"]
        #
    elasticsearch1:
        # HOST側の変更設定が必要(65530 から262144へ増加)
        # sudo sysctl -w vm.max_map_count = 262144
        #
        build: ./elasticsearch
        image: "myelasticsearch"
        container_name: "elasticsearch1"
        ports:
            - "9200:9200" #WebAPI
            - "9300:9300" #クラスタ間通信用（HOSTに開ける必要はない）
        volumes:
            # JVMオプション
            - ./elasticsearch/jvm.options:/home/elasticsearch/elasticsearch-7.9.2/config/jvm.options
            # Elasticsearch設定
            - ./elasticsearch/elasticsearch1.yml:/home/elasticsearch/elasticsearch-7.9.2/config/elasticsearch.yml

            # データ永続化
            - elasticsearch1_data:/home/elasticsearch/data
            - elasticsearch1_logs:/home/elasticsearch/logs

        command: ["elasticsearch"]


    elasticsearch2:
        # HOST側の変更設定が必要(65530 から262144へ増加)
        # sudo sysctl -w vm.max_map_count = 262144
        #
        build: ./elasticsearch
        image: "myelasticsearch"
        container_name: "elasticsearch2"
        depends_on:
            - elasticsearch1
        ports:
            - "9201:9200"
            - "9301:9300"
        volumes:
            - ./elasticsearch/jvm.options:/home/elasticsearch/elasticsearch-7.9.2/config/jvm.options
            - ./elasticsearch/elasticsearch2.yml:/home/elasticsearch/elasticsearch-7.9.2/config/elasticsearch.yml
            # データ永続化
            - elasticsearch2_data:/home/elasticsearch/data
            - elasticsearch2_logs:/home/elasticsearch/logs
        command: ["elasticsearch"]

    kibana:
        build: ./kibana
        image: "mykibana"
        container_name: "kibana"
        depends_on:
            - elasticsearch1
            #- elasticsearch2
        ports:
            - "5601:5601"
        volumes:
            - ./kibana/kibana.yml:/home/kibana/kibana-7.9.3-linux-x86_64/config/kibana.yml
        command: ["kibana"]

    nifi1:
        build: ./nifi
        image: "mynifi"
        container_name: "nifi1"
        environment:
            ZOOKEEPER_MYID: 1
        volumes:
            # 設定ファイル
            - ./nifi/nifi1.properties:/home/nifi/nifi-1.12.1/conf/nifi.properties
            - ./nifi/zookeeper.properties:/home/nifi/nifi-1.12.1/conf/zookeeper.properties
            - ./nifi/state-management.xml:/home/nifi/nifi-1.12.1/conf/state-management.xml
            # Flowの保存先
            - nifi1:/home/nifi/nifi-1.12.1/data
        ports:
            - 8080:8080
            - 8090:8090
    nifi2:
        build: ./nifi
        image: "mynifi"
        container_name: "nifi2"
        environment:
            ZOOKEEPER_MYID: 2
        volumes:
            # 設定ファイル
            - ./nifi/nifi2.properties:/home/nifi/nifi-1.12.1/conf/nifi.properties
            - ./nifi/zookeeper.properties:/home/nifi/nifi-1.12.1/conf/zookeeper.properties
            - ./nifi/state-management.xml:/home/nifi/nifi-1.12.1/conf/state-management.xml
            # Flowの保存先
            - nifi2:/home/nifi/nifi-1.12.1/data
        ports:
            - 8081:8080
            - 8091:8090

    nifi3:
        build: ./nifi
        image: "mynifi"
        container_name: "nifi3"
        environment:
            ZOOKEEPER_MYID: 3
        volumes:
            # 設定ファイル
            - ./nifi/nifi3.properties:/home/nifi/nifi-1.12.1/conf/nifi.properties
            - ./nifi/zookeeper.properties:/home/nifi/nifi-1.12.1/conf/zookeeper.properties
            - ./nifi/state-management.xml:/home/nifi/nifi-1.12.1/conf/state-management.xml
            # Flowの保存先
            - nifi3:/home/nifi/nifi-1.12.1/data
        ports:
            - 8082:8080
            - 8092:8090

    nifizookeeper1:
        image: "myzookeeper"
        container_name: "nifizookeeper1"
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_MYID: 1
        volumes:
            # 設定ファイル
            - ./nifi/zoo.cfg:/home/zookeeper/apache-zookeeper-3.6.2-bin/conf/zoo.cfg


volumes:
    zookeeper1:
        driver_opts:
            type: none
            device: ${PWD}/volumes/zookeeper1
            o: bind
            #    zookeeper2:
            #        driver_opts:
            #            type: none
            #            device: ./volumes/zookeeper2
            #            o: bind
            #    zookeeper3:
            #        driver_opts:
            #            type: none
            #            device: ./volumes/zookeeper3
            #            o: bind
    broker1:
        driver_opts:
            type: none
            device: ${PWD}/volumes/broker1
            o: bind
            #    broker2:
            #        driver_opts:
            #            type: none
            #            device: ./volumes/broker2
            #            o: bind
            #    broker3:
            #        driver_opts:
            #            type: none
            #            device: ./volumes/broker3
            #            o: bind
    elasticsearch1_data:
        driver_opts:
            type: none
            device: ${PWD}/volumes/elasticsearch1/data
            o: bind
    elasticsearch1_logs:
        driver_opts:
            type: none
            device: ${PWD}/volumes/elasticsearch1/logs
            o: bind
    elasticsearch2_data:
        driver_opts:
            type: none
            device: ${PWD}/volumes/elasticsearch2/data
            o: bind
    elasticsearch2_logs:
        driver_opts:
            type: none
            device: ${PWD}/volumes/elasticsearch2/logs
            o: bind
    nifi1:
        driver_opts:
            type: none
            device: ${PWD}/volumes/nifi1
            o: bind
    nifi2:
        driver_opts:
            type: none
            device: ${PWD}/volumes/nifi2
            o: bind
    nifi3:
        driver_opts:
            type: none
            device: ${PWD}/volumes/nifi3
            o: bind
